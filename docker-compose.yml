version: '3.8'

services:
  # Infrastructure services
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${DB_USER:-sa3d}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?Database password is required}
      POSTGRES_DB: ${DB_NAME:-sa3d_db}
      POSTGRES_INITDB_ARGS: "--auth-local=scram-sha-256 --auth-host=scram-sha-256"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-sa3d}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sa3d-internal

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-""} --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sa3d-internal

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - sa3d-kafka

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - sa3d-kafka

  # Application services
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: api-gateway
    ports:
      - "${API_GATEWAY_PORT:-8080}:8080"
    environment:
      GATEWAY_SERVER_PORT: 8080
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_DB: ${REDIS_DB:-0}
      JWT_SECRET: ${JWT_SECRET:?JWT secret is required for security}
      GATEWAY_SERVICES_ANALYSIS_URL: http://analysis-service:8080
      GATEWAY_SERVICES_VISUALIZATION_URL: http://visualization-service:8080
      GATEWAY_SERVICES_COLLABORATION_URL: http://collaboration-service:8080
      GATEWAY_SERVICES_METRICS_URL: http://metrics-service:8080
    depends_on:
      - redis
      - analysis-service
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sa3d-internal

  analysis-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: analysis
    ports:
      - "${ANALYSIS_SERVICE_PORT:-8081}:8080"
    environment:
      ANALYSIS_SERVER_PORT: 8080
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-sa3d}
      DB_PASSWORD: ${DB_PASSWORD:?Database password is required}
      DB_NAME: ${DB_NAME:-sa3d_db}
      DB_SSL_MODE: ${DB_SSL_MODE:-require}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_DB: ${REDIS_DB:-0}
      KAFKA_BROKERS: kafka:29092
    depends_on:
      - postgres
      - redis
      - kafka
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - sa3d-internal
      - sa3d-kafka

  # Frontend (to be added)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     REACT_APP_API_URL: http://localhost:8080
  #   depends_on:
  #     - api-gateway

networks:
  sa3d-internal:
    driver: bridge
    name: sa3d-internal
  sa3d-kafka:
    driver: bridge
    name: sa3d-kafka

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data: